{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "App.svelte",
    "BfInterface.svelte",
    "BfMachineState.svelte",
    "BfProgramInputBox.svelte"
  ],
  "sourcesContent": [
    "<script>\r\n\timport BfInterface from './BfInterface.svelte';\r\n\texport let state;\r\n\texport let program;\r\n\texport let newState;\r\n\texport let presets;\r\n</script>\r\n\r\n<main>\r\n\t<h1>brainf-wasm</h1>\r\n\t<p>A BrainF*ck Interpreter compiled into WASM loaded on Svelte</p>\r\n\t<p>Visit the <a href=\"https://svelte.dev/tutorial\">Svelte tutorial</a> to learn how to build Svelte apps.</p>\r\n\t<BfInterface state={state} program={program} newState={newState} presets={presets} />\r\n</main>\r\n\r\n<style>\r\n\tmain {\r\n\t\ttext-align: center;\r\n\t\tpadding: 1em;\r\n\t\t/* max-width: 240px; */\r\n\t\tmargin: 0 auto;\r\n\t}\r\n\r\n\th1 {\r\n\t\tcolor: #ff3e00;\r\n\t\ttext-transform: uppercase;\r\n\t\tfont-size: 4em;\r\n\t\tfont-weight: 100;\r\n\t}\r\n\r\n\t@media (min-width: 640px) {\r\n\t\tmain {\r\n\t\t\tmax-width: none;\r\n\t\t}\r\n\t}\r\n</style>",
    "<script>\r\n    import { onDestroy } from 'svelte';\r\n    import BfMachineState from './BfMachineState.svelte';\r\n    import BfProgramInputBox from './BfProgramInputBox.svelte';\r\n\r\n    export let state;\r\n\texport let program;\r\n    export let newState;\r\n    export let presets;\r\n\r\n    let inputStr = \"\";\r\n    const outputPlaceholder = \"(stream output shows here)\";\r\n    let outputStr = outputPlaceholder;\r\n    let showDec = false;\r\n\r\n    let programStr = \"\";\r\n    let machineInstance = {};\r\n    let errorStr = \"\";\r\n    let programIndex = 0;\r\n\r\n    let paused = true;\r\n    // let tickCount = 0;\r\n    const STEP_INTERVAL_MS = 500;\r\n\r\n    $: tapes = state.get_display_tapes(32);\r\n    $: tapeIndex = state.get_index();\r\n    // $: programIndex = !paused && machineInstance ? machineInstance.get_index() : 0;\r\n\r\n    function sleep(ms) {\r\n\t\treturn new Promise(resolve => setTimeout(resolve, ms));\r\n    }\r\n\r\n    function isU8(ch) {\r\n        return !isNaN(ch)\r\n            && !isNaN(parseFloat(ch))\r\n            && parseInt(ch) >= 0\r\n            && parseInt(ch) < 256;\r\n    }\r\n\r\n    function pushInput(machine) {\r\n        let splitted = inputStr.split(/[\\s,]+/);\r\n        console.log(splitted);\r\n\r\n        if (!splitted.every((n) => isU8(n))) {\r\n            return false;\r\n        }\r\n\r\n        machine.push_input(splitted.map(n => parseInt(n)));\r\n        return true;\r\n    }\r\n\r\n    async function step() {\r\n        try {\r\n            machineInstance.step(state);\r\n            outputStr = showDec ? state.output_dec() : state.output();\r\n            errorStr = \"\";\r\n            state = state;\r\n            programIndex = machineInstance.get_index();\r\n            await sleep(STEP_INTERVAL_MS);\r\n        } catch (ex) {\r\n            console.error(ex);\r\n            errorStr = ex.toString();\r\n        }\r\n    }\r\n\r\n    async function run() {\r\n        if (!programStr) {\r\n            errorStr = \"The program is empty!\";\r\n            return;\r\n        }\r\n\r\n        try {\r\n            paused = false;\r\n            state = newState();\r\n            machineInstance = program.parse(programStr);\r\n            console.log(typeof machineInstance, machineInstance);\r\n            if (machineInstance.needs_input()) {\r\n                if (!inputStr) {\r\n                    throw new Error(\"The input is empty!\");\r\n                }\r\n\r\n                if (!pushInput(state)) {\r\n                    throw new Error(\"Invalid input: should be a space/comma separated unsigned 8-bit integers!\");\r\n                }\r\n\r\n            }\r\n            \r\n            while (!paused && machineInstance.can_execute(state)) {\r\n                await step();\r\n            }\r\n\r\n            paused = true;\r\n            programIndex = 0;\r\n        } catch (ex) {\r\n            console.error(ex);\r\n            errorStr = ex.toString();\r\n        }\r\n    }\r\n\r\n    function runPresets(preset) {\r\n        if (!preset) {\r\n            return;\r\n        }\r\n\r\n        console.log(\"running preset\", preset);\r\n\r\n        programStr = preset.program;\r\n        showDec = preset.outputAsDec;\r\n        if (preset.inputs) {\r\n            inputStr = preset.inputs;\r\n        }\r\n    }\r\n\r\n    function reset() {\r\n        paused = true;\r\n        machineInstance.reset();\r\n        state.reset();\r\n        state = state;\r\n    }\r\n</script>\r\n\r\n<div id=\"bf-interface\">\r\n    <!-- <div id=\"bf-interface-input-area\">\r\n        <textarea id=\"bf-input-program\" name=\"bf-program-input\" bind:value={programStr}></textarea>\r\n        <button class=\"bf-button-input\" type=\"button\" on:click={run}>Run</button>\r\n        <button class=\"bf-button-input\" type=\"button\" on:click={reset}>Reset</button>\r\n    </div> -->\r\n    <BfProgramInputBox\r\n        inputText=\"{programStr}\"\r\n        isRunning=\"{!paused}\"\r\n        curIndex=\"{programIndex}\"\r\n    />\r\n    <button class=\"bf-button-input\" type=\"button\" on:click={run}>Run</button>\r\n    <button class=\"bf-button-input\" type=\"button\" on:click={reset}>Reset</button>\r\n    <BfMachineState \r\n        tapes={tapes}\r\n        tapeIndex={tapeIndex}\r\n    />\r\n    <section class=\"bf-interface-io\">\r\n        <div id=\"bf-interface-input-area\">\r\n            Input:\r\n            <textarea id=\"bf-input-stream\" bind:value={inputStr}></textarea>\r\n        </div>\r\n        <div id=\"bf-interface-output-area\">\r\n            Output:\r\n            <textarea id=\"bf-output-stream\" name=\"bf-output-stream\" readonly>{outputStr}</textarea>\r\n            <br>\r\n            <input type=\"checkbox\" id=\"bf-output-print-hex\" bind:checked={showDec}/><label for=\"bf-output-print-hex\">Print in dec</label>\r\n        </div>\r\n        <div id=\"bf-interface-errors\">\r\n            {#if errorStr}\r\n            <div id=\"bf-interface-error-box\">{errorStr}</div>\r\n            {/if}\r\n        </div>\r\n    </section>\r\n    <section class=\"bf-interface-preset\">\r\n        <div id=\"bf-interface-presets\">\r\n            <ul class=\"presets\">\r\n                {#each presets as ps}\r\n                    <li>\r\n                        <button on:click={runPresets(ps)}>{ps.description}</button>\r\n                    </li>\r\n                {/each}\r\n            </ul>\r\n\r\n        </div>\r\n    </section>\r\n</div>\r\n\r\n<style>\r\n    section {\r\n        display: block;\r\n    }\r\n\r\n    ul.presets li {\r\n        display: inline-block;\r\n        list-style-type: none;\r\n        /* border: 1px solid #aeaeae; */\r\n        /* width: 30px; */\r\n        height: 23px;\r\n        text-align: center;\r\n        padding-top: 7px;\r\n        padding-left: 10px;\r\n        /* border-right: none; */\r\n        color: gray;\r\n    }\r\n\r\n\t#bf-interface {\r\n\t\ttext-align: center;\r\n\t\tpadding: 1em;\r\n\t\t/* max-width: 480px; */\r\n\t\tmargin: 0 auto;\r\n\t}\r\n\r\n    #bf-interface-error-box {\r\n        background-color: #ff3e00;\r\n        color: beige;\r\n        padding: 1em;\r\n\t\tmargin: 0 auto;\r\n    }\r\n</style>",
    "<script>\r\n    export let tapes;\r\n    export let tapeIndex;\r\n    const tapeSize = 32;\r\n    $: indexPositionStyle = `margin-left: ${6 + tapeIndex * tapeSize}px`;\r\n</script>\r\n\r\n<section id=\"bf-interface-machine-state\">\r\n    <div id=\"bf-interface-state-block\" style=\"display: inline-block\">\r\n        <ul class=\"tape\">\r\n            {#each tapes as tp}\r\n            <li>\r\n                {tp}\r\n            </li>\r\n            {/each}\r\n            <li class=\"tape-elem-rightmost\">(...)</li>\r\n        </ul>\r\n        <div class=\"tape-pointer\" style={indexPositionStyle}>\r\n            <em>\r\n            </em>\r\n        </div>\r\n    </div>\r\n\r\n</section>\r\n\r\n<style>\r\n\r\n    section {\r\n        /* justify-content: center; */\r\n        margin-top: 40px;\r\n        margin-left: 20px;\r\n    }\r\n\r\n    #bf-interface-state-block {\r\n        width: 720px;\r\n        text-align: center;\r\n    }\r\n\r\n    div.tape-pointer {\r\n        width: 31px;\r\n    }\r\n\r\n    div.tape-pointer em {\r\n        background-color: #ff3e00;\r\n        display: block;\r\n        width: 10px;\r\n        height: 15px;\r\n        margin-top: 6px;\r\n        margin-left: 10px;\r\n\r\n    }\r\n\r\n    div.tape-pointer em::before {\r\n        content: \"\";\r\n        background-color: #ff3e00;\r\n        display: block;\r\n        width: 0;\r\n        height: 0;\r\n        border-left: 5px solid transparent;\r\n        border-right: 5px solid transparent;\r\n        border-bottom: 5px solid #ff3e00;\r\n        margin-top: -5px;\r\n\r\n    }\r\n\r\n    ul.tape {\r\n        display: block;\r\n        list-style-type: disc;\r\n        overflow: hidden;\r\n        /* margin: 0; */\r\n        padding: 0;\r\n        height: 32px;\r\n    }\r\n    ul {\r\n        display: block;\r\n        list-style-type: disc;\r\n        /* margin-block-start: 1em;\r\n        margin-block-end: 1em; */\r\n        margin-inline-start: 0px;\r\n        margin-inline-end: 0px;\r\n        padding-inline-start: 40px;\r\n    }\r\n\r\n    ul.tape li {\r\n        display: inline-block;\r\n        list-style-type: none;\r\n        border: 1px solid #aeaeae;\r\n        width: 30px;\r\n        height: 23px;\r\n        text-align: center;\r\n        padding-top: 7px;\r\n        /* border-right: none; */\r\n        color: gray;\r\n    }\r\n\r\n</style>\r\n",
    "<script>\r\n    export let inputText = \"\";\r\n    export let isRunning;\r\n    export let curIndex;\r\n\r\n    let displayElem = \"\";\r\n    $: if (isRunning && (curIndex >= 0 && curIndex < inputText.length)) {\r\n        console.log(\"display:\", curIndex);\r\n        let head = inputText.slice(0, curIndex);\r\n        let caratChar = inputText[curIndex];\r\n        let tail = inputText.slice(curIndex + 1);\r\n        displayElem = head + `<span id=\"bf-program-caret\" class=\"carat\">${caratChar}</span>` + tail;\r\n    }\r\n</script>\r\n\r\n<div id=\"bf-interface-input-area\">\r\n    {#if !isRunning}\r\n    <textarea id=\"bf-input-program\" name=\"bf-program-input\" bind:value={inputText} ></textarea>\r\n    {:else}\r\n    <div id=\"bf-interface-program-preview\">\r\n        {@html displayElem}\r\n    </div>\r\n    <span id=\"bf-program-caret\" class=\"caret\" style=\"display: none\"></span>\r\n    {/if}\r\n</div>\r\n\r\n<style>\r\n    #bf-interface-program-preview, #bf-input-program {\r\n        display: block;\r\n        background-color: beige;\r\n        font-family: monospace;\r\n\t\tmargin: 0 auto;\r\n        padding: 0.4em;\r\n        width: 480px;\r\n        height: 400px;\r\n        border: 3px solid #3e3e3e;\r\n        font-size: 16px;\r\n        text-align: start;\r\n        word-break: break-all;\r\n    }\r\n    :global(#bf-program-caret) {\r\n        border-radius: 4px;\r\n        background-color: rgb(243, 89, 243);\r\n        color: black;\r\n    }\r\n</style>"
  ],
  "names": [],
  "mappings": "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"
}