{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "App.svelte",
    "BfInterface.svelte",
    "BfMachineState.svelte",
    "BfProgramInputBox.svelte"
  ],
  "sourcesContent": [
    "<script>\n\timport BfInterface from './BfInterface.svelte';\n\texport let state;\n\texport let program;\n\texport let newState;\n\texport let presets;\n</script>\n\n<main>\n\t<h1>brainf-wasm</h1>\n\t<p>A BrainF*ck Interpreter compiled into WASM loaded on Svelte</p>\n\t<p>Visit the <a href=\"https://svelte.dev/tutorial\">Svelte tutorial</a> to learn how to build Svelte apps.</p>\n\t<BfInterface state={state} program={program} newState={newState} presets={presets} />\n</main>\n\n<style>\n\tmain {\n\t\ttext-align: center;\n\t\tpadding: 1em;\n\t\t/* max-width: 240px; */\n\t\tmargin: 0 auto;\n\t}\n\n\th1 {\n\t\tcolor: #ff3e00;\n\t\ttext-transform: uppercase;\n\t\tfont-size: 4em;\n\t\tfont-weight: 100;\n\t}\n\n\t@media (min-width: 640px) {\n\t\tmain {\n\t\t\tmax-width: none;\n\t\t}\n\t}\n</style>",
    "<script>\n    import BfMachineState from './BfMachineState.svelte';\n    import BfProgramInputBox from './BfProgramInputBox.svelte';\n    import { programInput } from './inputStore';\n\n    export let state;\n\texport let program;\n    export let newState;\n    export let presets;\n\n    let inputStr = \"\";\n    const outputPlaceholder = \"(stream output shows here)\";\n    let outputStr = outputPlaceholder;\n    let showDec = false;\n\n    let machineInstance = {};\n    let errorStr = \"\";\n    let programIndex = 0;\n\n    let paused = true;\n    const STEP_INTERVAL_MS = 125;\n\n    $: tapes = state.get_display_tapes(32);\n    $: tapeIndex = state.get_index();\n\n    function sleep(ms) {\n\t\treturn new Promise(resolve => setTimeout(resolve, ms));\n    }\n\n    function isU8(ch) {\n        return !isNaN(ch)\n            && !isNaN(parseFloat(ch))\n            && parseInt(ch) >= 0\n            && parseInt(ch) < 256;\n    }\n\n    function pushInput(machine) {\n        let splitted = inputStr.split(/[\\s,]+/);\n        // console.log(splitted);\n\n        if (!splitted.every((n) => isU8(n))) {\n            return false;\n        }\n\n        machine.push_input(splitted.map(n => parseInt(n)));\n        return true;\n    }\n\n    async function step() {\n        try {\n            machineInstance.step(state);\n            outputStr = showDec ? state.output_dec() : state.output();\n            errorStr = \"\";\n            state = state;\n            programIndex = machineInstance.get_index();\n            await sleep(STEP_INTERVAL_MS);\n        } catch (ex) {\n            console.error(ex);\n            errorStr = ex.toString();\n        }\n    }\n\n    async function run() {\n        if (!$programInput) {\n            errorStr = \"The program is empty!\";\n            return;\n        }\n\n        try {\n            paused = false;\n            state = newState();\n            machineInstance = program.parse($programInput);\n            if (machineInstance.needs_input()) {\n                if (!inputStr) {\n                    throw new Error(\"The input is empty!\");\n                }\n\n                if (!pushInput(state)) {\n                    throw new Error(\"Invalid input: should be a space/comma separated unsigned 8-bit integers!\");\n                }\n\n            }\n\n            // push input box update first\n            state = state;\n            await sleep(STEP_INTERVAL_MS);\n            \n            while (!paused && machineInstance.can_execute(state)) {\n                await step();\n            }\n\n            paused = true;\n            programIndex = 0;\n        } catch (ex) {\n            console.error(ex);\n            errorStr = ex.toString();\n        }\n    }\n\n    function runPresets(preset) {\n        if (!preset) {\n            return;\n        }\n\n        $programInput = preset.program;\n        showDec = preset.outputAsDec;\n        if (preset.inputs) {\n            inputStr = preset.inputs;\n        }\n    }\n\n    function reset() {\n        paused = true;\n        machineInstance.reset();\n        state.reset();\n        state = state;\n    }\n</script>\n\n<div id=\"bf-interface\">\n    <BfProgramInputBox\n        isRunning=\"{!paused}\"\n        curIndex=\"{programIndex}\"\n    />\n    <button class=\"bf-button-input\" type=\"button\" on:click={run} disabled={!paused}>\n        {#if paused} Run {:else} Running... {/if}\n    </button>\n    <button class=\"bf-button-input\" type=\"button\" on:click={reset}>Reset</button>\n    <BfMachineState \n        tapes={tapes}\n        tapeIndex={tapeIndex}\n    />\n    <section class=\"bf-interface-io\">\n        <div id=\"bf-interface-input-area\">\n            Input:\n            <textarea id=\"bf-input-stream\" bind:value={inputStr}></textarea>\n        </div>\n        <div id=\"bf-interface-output-area\">\n            Output:\n            <textarea id=\"bf-output-stream\" name=\"bf-output-stream\" readonly>{outputStr}</textarea>\n            <br>\n            <input type=\"checkbox\" id=\"bf-output-print-hex\" bind:checked={showDec}/><label for=\"bf-output-print-hex\">Print in dec</label>\n        </div>\n        <div id=\"bf-interface-errors\">\n            {#if errorStr}\n            <div id=\"bf-interface-error-box\">{errorStr}</div>\n            {/if}\n        </div>\n    </section>\n    <section class=\"bf-interface-preset\">\n        <div id=\"bf-interface-presets\">\n            <ul class=\"presets\">\n                {#each presets as ps}\n                    <li>\n                        <button on:click={runPresets(ps)}>{ps.description}</button>\n                    </li>\n                {/each}\n            </ul>\n\n        </div>\n    </section>\n</div>\n\n<style>\n    section {\n        display: block;\n    }\n\n    ul.presets li {\n        display: inline-block;\n        list-style-type: none;\n        height: 23px;\n        text-align: center;\n        padding-top: 7px;\n        padding-left: 10px;\n        color: gray;\n    }\n\n\t#bf-interface {\n\t\ttext-align: center;\n\t\tpadding: 1em;\n\t\tmargin: 0 auto;\n\t}\n\n    #bf-interface-error-box {\n        background-color: #ff3e00;\n        color: beige;\n        padding: 1em;\n\t\tmargin: 0 auto;\n    }\n</style>",
    "<script>\n    export let tapes;\n    export let tapeIndex;\n    const tapeSize = 32;\n    $: indexPositionStyle = `margin-left: ${6 + tapeIndex * tapeSize}px`;\n</script>\n\n<section id=\"bf-interface-machine-state\">\n    <div id=\"bf-interface-state-block\" style=\"display: inline-block\">\n        <ul class=\"tape\">\n            {#each tapes as tp}\n            <li>\n                {tp}\n            </li>\n            {/each}\n            <li class=\"tape-elem-rightmost\">(...)</li>\n        </ul>\n        <div class=\"tape-pointer\" style={indexPositionStyle}>\n            <em>\n            </em>\n        </div>\n    </div>\n\n</section>\n\n<style>\n\n    section {\n        /* justify-content: center; */\n        margin-top: 40px;\n        margin-left: 20px;\n    }\n\n    #bf-interface-state-block {\n        width: 720px;\n        text-align: center;\n    }\n\n    div.tape-pointer {\n        width: 31px;\n    }\n\n    div.tape-pointer em {\n        background-color: #ff3e00;\n        display: block;\n        width: 10px;\n        height: 15px;\n        margin-top: 6px;\n        margin-left: 10px;\n\n    }\n\n    div.tape-pointer em::before {\n        content: \"\";\n        background-color: #ff3e00;\n        display: block;\n        width: 0;\n        height: 0;\n        border-left: 5px solid transparent;\n        border-right: 5px solid transparent;\n        border-bottom: 5px solid #ff3e00;\n        margin-top: -5px;\n\n    }\n\n    ul.tape {\n        display: block;\n        list-style-type: disc;\n        overflow: hidden;\n        padding: 0;\n        height: 32px;\n    }\n    ul {\n        display: block;\n        list-style-type: disc;\n        margin-inline-start: 0px;\n        margin-inline-end: 0px;\n        padding-inline-start: 40px;\n    }\n\n    ul.tape li {\n        display: inline-block;\n        list-style-type: none;\n        border: 1px solid #aeaeae;\n        width: 30px;\n        height: 23px;\n        text-align: center;\n        padding-top: 7px;\n        /* border-right: none; */\n        color: gray;\n    }\n\n</style>\n",
    "<script>\n    import { programInput } from './inputStore';\n\n    export let isRunning;\n    export let curIndex;\n\n    let inputText = \"\";\n    let displayElem = \"\";\n    $: {\n        inputText = $programInput;\n        console.log(`input: ${inputText}`);\n    }\n    $: if (isRunning && (curIndex >= 0 && curIndex < inputText.length)) {\n        let head = inputText.slice(0, curIndex);\n        let caratChar = inputText[curIndex];\n        let tail = inputText.slice(curIndex + 1);\n        displayElem = head + `<span id=\"bf-program-caret\" class=\"carat\">${caratChar}</span>` + tail;\n    }\n</script>\n\n<div id=\"bf-interface-input-area\">\n    {#if !isRunning}\n    <textarea id=\"bf-input-program\" name=\"bf-program-input\" bind:value={$programInput} ></textarea>\n    {:else}\n    <div id=\"bf-interface-program-preview\">\n        {@html displayElem}\n    </div>\n    <span id=\"bf-program-caret\" class=\"caret\" style=\"display: none\"></span>\n    {/if}\n</div>\n\n<style>\n    #bf-interface-program-preview, #bf-input-program {\n        display: block;\n        background-color: beige;\n        font-family: monospace;\n\t\tmargin: 0 auto;\n        padding: 0.4em;\n        width: 480px;\n        height: 400px;\n        border: 3px solid #3e3e3e;\n        font-size: 16px;\n        text-align: start;\n        word-break: break-all;\n    }\n    :global(#bf-program-caret) {\n        border-radius: 4px;\n        background-color: rgb(243, 89, 243);\n        color: black;\n    }\n</style>"
  ],
  "names": [],
  "mappings": "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"
}