{"version":3,"file":"bundle.js","sources":["../../node_modules/svelte/internal/index.mjs","../../src/BfMachineState.svelte","../../node_modules/svelte/store/index.mjs","../../src/inputStore.js","../../src/BfProgramInputBox.svelte","../../src/BfInterface.svelte","../../src/App.svelte","../../target/wasm-pack/svelte-wasm-brainf-greeting/index.js","../../src/presets.js","../../src/main.js"],"sourcesContent":["function noop() { }\nconst identity = x => x;\nfunction assign(tar, src) {\n    // @ts-ignore\n    for (const k in src)\n        tar[k] = src[k];\n    return tar;\n}\nfunction is_promise(value) {\n    return value && typeof value === 'object' && typeof value.then === 'function';\n}\nfunction add_location(element, file, line, column, char) {\n    element.__svelte_meta = {\n        loc: { file, line, column, char }\n    };\n}\nfunction run(fn) {\n    return fn();\n}\nfunction blank_object() {\n    return Object.create(null);\n}\nfunction run_all(fns) {\n    fns.forEach(run);\n}\nfunction is_function(thing) {\n    return typeof thing === 'function';\n}\nfunction safe_not_equal(a, b) {\n    return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');\n}\nfunction not_equal(a, b) {\n    return a != a ? b == b : a !== b;\n}\nfunction is_empty(obj) {\n    return Object.keys(obj).length === 0;\n}\nfunction validate_store(store, name) {\n    if (store != null && typeof store.subscribe !== 'function') {\n        throw new Error(`'${name}' is not a store with a 'subscribe' method`);\n    }\n}\nfunction subscribe(store, ...callbacks) {\n    if (store == null) {\n        return noop;\n    }\n    const unsub = store.subscribe(...callbacks);\n    return unsub.unsubscribe ? () => unsub.unsubscribe() : unsub;\n}\nfunction get_store_value(store) {\n    let value;\n    subscribe(store, _ => value = _)();\n    return value;\n}\nfunction component_subscribe(component, store, callback) {\n    component.$$.on_destroy.push(subscribe(store, callback));\n}\nfunction create_slot(definition, ctx, $$scope, fn) {\n    if (definition) {\n        const slot_ctx = get_slot_context(definition, ctx, $$scope, fn);\n        return definition[0](slot_ctx);\n    }\n}\nfunction get_slot_context(definition, ctx, $$scope, fn) {\n    return definition[1] && fn\n        ? assign($$scope.ctx.slice(), definition[1](fn(ctx)))\n        : $$scope.ctx;\n}\nfunction get_slot_changes(definition, $$scope, dirty, fn) {\n    if (definition[2] && fn) {\n        const lets = definition[2](fn(dirty));\n        if ($$scope.dirty === undefined) {\n            return lets;\n        }\n        if (typeof lets === 'object') {\n            const merged = [];\n            const len = Math.max($$scope.dirty.length, lets.length);\n            for (let i = 0; i < len; i += 1) {\n                merged[i] = $$scope.dirty[i] | lets[i];\n            }\n            return merged;\n        }\n        return $$scope.dirty | lets;\n    }\n    return $$scope.dirty;\n}\nfunction update_slot(slot, slot_definition, ctx, $$scope, dirty, get_slot_changes_fn, get_slot_context_fn) {\n    const slot_changes = get_slot_changes(slot_definition, $$scope, dirty, get_slot_changes_fn);\n    if (slot_changes) {\n        const slot_context = get_slot_context(slot_definition, ctx, $$scope, get_slot_context_fn);\n        slot.p(slot_context, slot_changes);\n    }\n}\nfunction exclude_internal_props(props) {\n    const result = {};\n    for (const k in props)\n        if (k[0] !== '$')\n            result[k] = props[k];\n    return result;\n}\nfunction compute_rest_props(props, keys) {\n    const rest = {};\n    keys = new Set(keys);\n    for (const k in props)\n        if (!keys.has(k) && k[0] !== '$')\n            rest[k] = props[k];\n    return rest;\n}\nfunction compute_slots(slots) {\n    const result = {};\n    for (const key in slots) {\n        result[key] = true;\n    }\n    return result;\n}\nfunction once(fn) {\n    let ran = false;\n    return function (...args) {\n        if (ran)\n            return;\n        ran = true;\n        fn.call(this, ...args);\n    };\n}\nfunction null_to_empty(value) {\n    return value == null ? '' : value;\n}\nfunction set_store_value(store, ret, value = ret) {\n    store.set(value);\n    return ret;\n}\nconst has_prop = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop);\nfunction action_destroyer(action_result) {\n    return action_result && is_function(action_result.destroy) ? action_result.destroy : noop;\n}\n\nconst is_client = typeof window !== 'undefined';\nlet now = is_client\n    ? () => window.performance.now()\n    : () => Date.now();\nlet raf = is_client ? cb => requestAnimationFrame(cb) : noop;\n// used internally for testing\nfunction set_now(fn) {\n    now = fn;\n}\nfunction set_raf(fn) {\n    raf = fn;\n}\n\nconst tasks = new Set();\nfunction run_tasks(now) {\n    tasks.forEach(task => {\n        if (!task.c(now)) {\n            tasks.delete(task);\n            task.f();\n        }\n    });\n    if (tasks.size !== 0)\n        raf(run_tasks);\n}\n/**\n * For testing purposes only!\n */\nfunction clear_loops() {\n    tasks.clear();\n}\n/**\n * Creates a new task that runs on each raf frame\n * until it returns a falsy value or is aborted\n */\nfunction loop(callback) {\n    let task;\n    if (tasks.size === 0)\n        raf(run_tasks);\n    return {\n        promise: new Promise(fulfill => {\n            tasks.add(task = { c: callback, f: fulfill });\n        }),\n        abort() {\n            tasks.delete(task);\n        }\n    };\n}\n\nfunction append(target, node) {\n    target.appendChild(node);\n}\nfunction insert(target, node, anchor) {\n    target.insertBefore(node, anchor || null);\n}\nfunction detach(node) {\n    node.parentNode.removeChild(node);\n}\nfunction destroy_each(iterations, detaching) {\n    for (let i = 0; i < iterations.length; i += 1) {\n        if (iterations[i])\n            iterations[i].d(detaching);\n    }\n}\nfunction element(name) {\n    return document.createElement(name);\n}\nfunction element_is(name, is) {\n    return document.createElement(name, { is });\n}\nfunction object_without_properties(obj, exclude) {\n    const target = {};\n    for (const k in obj) {\n        if (has_prop(obj, k)\n            // @ts-ignore\n            && exclude.indexOf(k) === -1) {\n            // @ts-ignore\n            target[k] = obj[k];\n        }\n    }\n    return target;\n}\nfunction svg_element(name) {\n    return document.createElementNS('http://www.w3.org/2000/svg', name);\n}\nfunction text(data) {\n    return document.createTextNode(data);\n}\nfunction space() {\n    return text(' ');\n}\nfunction empty() {\n    return text('');\n}\nfunction listen(node, event, handler, options) {\n    node.addEventListener(event, handler, options);\n    return () => node.removeEventListener(event, handler, options);\n}\nfunction prevent_default(fn) {\n    return function (event) {\n        event.preventDefault();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction stop_propagation(fn) {\n    return function (event) {\n        event.stopPropagation();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction self(fn) {\n    return function (event) {\n        // @ts-ignore\n        if (event.target === this)\n            fn.call(this, event);\n    };\n}\nfunction attr(node, attribute, value) {\n    if (value == null)\n        node.removeAttribute(attribute);\n    else if (node.getAttribute(attribute) !== value)\n        node.setAttribute(attribute, value);\n}\nfunction set_attributes(node, attributes) {\n    // @ts-ignore\n    const descriptors = Object.getOwnPropertyDescriptors(node.__proto__);\n    for (const key in attributes) {\n        if (attributes[key] == null) {\n            node.removeAttribute(key);\n        }\n        else if (key === 'style') {\n            node.style.cssText = attributes[key];\n        }\n        else if (key === '__value') {\n            node.value = node[key] = attributes[key];\n        }\n        else if (descriptors[key] && descriptors[key].set) {\n            node[key] = attributes[key];\n        }\n        else {\n            attr(node, key, attributes[key]);\n        }\n    }\n}\nfunction set_svg_attributes(node, attributes) {\n    for (const key in attributes) {\n        attr(node, key, attributes[key]);\n    }\n}\nfunction set_custom_element_data(node, prop, value) {\n    if (prop in node) {\n        node[prop] = value;\n    }\n    else {\n        attr(node, prop, value);\n    }\n}\nfunction xlink_attr(node, attribute, value) {\n    node.setAttributeNS('http://www.w3.org/1999/xlink', attribute, value);\n}\nfunction get_binding_group_value(group, __value, checked) {\n    const value = new Set();\n    for (let i = 0; i < group.length; i += 1) {\n        if (group[i].checked)\n            value.add(group[i].__value);\n    }\n    if (!checked) {\n        value.delete(__value);\n    }\n    return Array.from(value);\n}\nfunction to_number(value) {\n    return value === '' ? null : +value;\n}\nfunction time_ranges_to_array(ranges) {\n    const array = [];\n    for (let i = 0; i < ranges.length; i += 1) {\n        array.push({ start: ranges.start(i), end: ranges.end(i) });\n    }\n    return array;\n}\nfunction children(element) {\n    return Array.from(element.childNodes);\n}\nfunction claim_element(nodes, name, attributes, svg) {\n    for (let i = 0; i < nodes.length; i += 1) {\n        const node = nodes[i];\n        if (node.nodeName === name) {\n            let j = 0;\n            const remove = [];\n            while (j < node.attributes.length) {\n                const attribute = node.attributes[j++];\n                if (!attributes[attribute.name]) {\n                    remove.push(attribute.name);\n                }\n            }\n            for (let k = 0; k < remove.length; k++) {\n                node.removeAttribute(remove[k]);\n            }\n            return nodes.splice(i, 1)[0];\n        }\n    }\n    return svg ? svg_element(name) : element(name);\n}\nfunction claim_text(nodes, data) {\n    for (let i = 0; i < nodes.length; i += 1) {\n        const node = nodes[i];\n        if (node.nodeType === 3) {\n            node.data = '' + data;\n            return nodes.splice(i, 1)[0];\n        }\n    }\n    return text(data);\n}\nfunction claim_space(nodes) {\n    return claim_text(nodes, ' ');\n}\nfunction set_data(text, data) {\n    data = '' + data;\n    if (text.wholeText !== data)\n        text.data = data;\n}\nfunction set_input_value(input, value) {\n    input.value = value == null ? '' : value;\n}\nfunction set_input_type(input, type) {\n    try {\n        input.type = type;\n    }\n    catch (e) {\n        // do nothing\n    }\n}\nfunction set_style(node, key, value, important) {\n    node.style.setProperty(key, value, important ? 'important' : '');\n}\nfunction select_option(select, value) {\n    for (let i = 0; i < select.options.length; i += 1) {\n        const option = select.options[i];\n        if (option.__value === value) {\n            option.selected = true;\n            return;\n        }\n    }\n}\nfunction select_options(select, value) {\n    for (let i = 0; i < select.options.length; i += 1) {\n        const option = select.options[i];\n        option.selected = ~value.indexOf(option.__value);\n    }\n}\nfunction select_value(select) {\n    const selected_option = select.querySelector(':checked') || select.options[0];\n    return selected_option && selected_option.__value;\n}\nfunction select_multiple_value(select) {\n    return [].map.call(select.querySelectorAll(':checked'), option => option.__value);\n}\n// unfortunately this can't be a constant as that wouldn't be tree-shakeable\n// so we cache the result instead\nlet crossorigin;\nfunction is_crossorigin() {\n    if (crossorigin === undefined) {\n        crossorigin = false;\n        try {\n            if (typeof window !== 'undefined' && window.parent) {\n                void window.parent.document;\n            }\n        }\n        catch (error) {\n            crossorigin = true;\n        }\n    }\n    return crossorigin;\n}\nfunction add_resize_listener(node, fn) {\n    const computed_style = getComputedStyle(node);\n    const z_index = (parseInt(computed_style.zIndex) || 0) - 1;\n    if (computed_style.position === 'static') {\n        node.style.position = 'relative';\n    }\n    const iframe = element('iframe');\n    iframe.setAttribute('style', `display: block; position: absolute; top: 0; left: 0; width: 100%; height: 100%; ` +\n        `overflow: hidden; border: 0; opacity: 0; pointer-events: none; z-index: ${z_index};`);\n    iframe.setAttribute('aria-hidden', 'true');\n    iframe.tabIndex = -1;\n    const crossorigin = is_crossorigin();\n    let unsubscribe;\n    if (crossorigin) {\n        iframe.src = `data:text/html,<script>onresize=function(){parent.postMessage(0,'*')}</script>`;\n        unsubscribe = listen(window, 'message', (event) => {\n            if (event.source === iframe.contentWindow)\n                fn();\n        });\n    }\n    else {\n        iframe.src = 'about:blank';\n        iframe.onload = () => {\n            unsubscribe = listen(iframe.contentWindow, 'resize', fn);\n        };\n    }\n    append(node, iframe);\n    return () => {\n        if (crossorigin) {\n            unsubscribe();\n        }\n        else if (unsubscribe && iframe.contentWindow) {\n            unsubscribe();\n        }\n        detach(iframe);\n    };\n}\nfunction toggle_class(element, name, toggle) {\n    element.classList[toggle ? 'add' : 'remove'](name);\n}\nfunction custom_event(type, detail) {\n    const e = document.createEvent('CustomEvent');\n    e.initCustomEvent(type, false, false, detail);\n    return e;\n}\nfunction query_selector_all(selector, parent = document.body) {\n    return Array.from(parent.querySelectorAll(selector));\n}\nclass HtmlTag {\n    constructor(anchor = null) {\n        this.a = anchor;\n        this.e = this.n = null;\n    }\n    m(html, target, anchor = null) {\n        if (!this.e) {\n            this.e = element(target.nodeName);\n            this.t = target;\n            this.h(html);\n        }\n        this.i(anchor);\n    }\n    h(html) {\n        this.e.innerHTML = html;\n        this.n = Array.from(this.e.childNodes);\n    }\n    i(anchor) {\n        for (let i = 0; i < this.n.length; i += 1) {\n            insert(this.t, this.n[i], anchor);\n        }\n    }\n    p(html) {\n        this.d();\n        this.h(html);\n        this.i(this.a);\n    }\n    d() {\n        this.n.forEach(detach);\n    }\n}\n\nconst active_docs = new Set();\nlet active = 0;\n// https://github.com/darkskyapp/string-hash/blob/master/index.js\nfunction hash(str) {\n    let hash = 5381;\n    let i = str.length;\n    while (i--)\n        hash = ((hash << 5) - hash) ^ str.charCodeAt(i);\n    return hash >>> 0;\n}\nfunction create_rule(node, a, b, duration, delay, ease, fn, uid = 0) {\n    const step = 16.666 / duration;\n    let keyframes = '{\\n';\n    for (let p = 0; p <= 1; p += step) {\n        const t = a + (b - a) * ease(p);\n        keyframes += p * 100 + `%{${fn(t, 1 - t)}}\\n`;\n    }\n    const rule = keyframes + `100% {${fn(b, 1 - b)}}\\n}`;\n    const name = `__svelte_${hash(rule)}_${uid}`;\n    const doc = node.ownerDocument;\n    active_docs.add(doc);\n    const stylesheet = doc.__svelte_stylesheet || (doc.__svelte_stylesheet = doc.head.appendChild(element('style')).sheet);\n    const current_rules = doc.__svelte_rules || (doc.__svelte_rules = {});\n    if (!current_rules[name]) {\n        current_rules[name] = true;\n        stylesheet.insertRule(`@keyframes ${name} ${rule}`, stylesheet.cssRules.length);\n    }\n    const animation = node.style.animation || '';\n    node.style.animation = `${animation ? `${animation}, ` : ``}${name} ${duration}ms linear ${delay}ms 1 both`;\n    active += 1;\n    return name;\n}\nfunction delete_rule(node, name) {\n    const previous = (node.style.animation || '').split(', ');\n    const next = previous.filter(name\n        ? anim => anim.indexOf(name) < 0 // remove specific animation\n        : anim => anim.indexOf('__svelte') === -1 // remove all Svelte animations\n    );\n    const deleted = previous.length - next.length;\n    if (deleted) {\n        node.style.animation = next.join(', ');\n        active -= deleted;\n        if (!active)\n            clear_rules();\n    }\n}\nfunction clear_rules() {\n    raf(() => {\n        if (active)\n            return;\n        active_docs.forEach(doc => {\n            const stylesheet = doc.__svelte_stylesheet;\n            let i = stylesheet.cssRules.length;\n            while (i--)\n                stylesheet.deleteRule(i);\n            doc.__svelte_rules = {};\n        });\n        active_docs.clear();\n    });\n}\n\nfunction create_animation(node, from, fn, params) {\n    if (!from)\n        return noop;\n    const to = node.getBoundingClientRect();\n    if (from.left === to.left && from.right === to.right && from.top === to.top && from.bottom === to.bottom)\n        return noop;\n    const { delay = 0, duration = 300, easing = identity, \n    // @ts-ignore todo: should this be separated from destructuring? Or start/end added to public api and documentation?\n    start: start_time = now() + delay, \n    // @ts-ignore todo:\n    end = start_time + duration, tick = noop, css } = fn(node, { from, to }, params);\n    let running = true;\n    let started = false;\n    let name;\n    function start() {\n        if (css) {\n            name = create_rule(node, 0, 1, duration, delay, easing, css);\n        }\n        if (!delay) {\n            started = true;\n        }\n    }\n    function stop() {\n        if (css)\n            delete_rule(node, name);\n        running = false;\n    }\n    loop(now => {\n        if (!started && now >= start_time) {\n            started = true;\n        }\n        if (started && now >= end) {\n            tick(1, 0);\n            stop();\n        }\n        if (!running) {\n            return false;\n        }\n        if (started) {\n            const p = now - start_time;\n            const t = 0 + 1 * easing(p / duration);\n            tick(t, 1 - t);\n        }\n        return true;\n    });\n    start();\n    tick(0, 1);\n    return stop;\n}\nfunction fix_position(node) {\n    const style = getComputedStyle(node);\n    if (style.position !== 'absolute' && style.position !== 'fixed') {\n        const { width, height } = style;\n        const a = node.getBoundingClientRect();\n        node.style.position = 'absolute';\n        node.style.width = width;\n        node.style.height = height;\n        add_transform(node, a);\n    }\n}\nfunction add_transform(node, a) {\n    const b = node.getBoundingClientRect();\n    if (a.left !== b.left || a.top !== b.top) {\n        const style = getComputedStyle(node);\n        const transform = style.transform === 'none' ? '' : style.transform;\n        node.style.transform = `${transform} translate(${a.left - b.left}px, ${a.top - b.top}px)`;\n    }\n}\n\nlet current_component;\nfunction set_current_component(component) {\n    current_component = component;\n}\nfunction get_current_component() {\n    if (!current_component)\n        throw new Error(`Function called outside component initialization`);\n    return current_component;\n}\nfunction beforeUpdate(fn) {\n    get_current_component().$$.before_update.push(fn);\n}\nfunction onMount(fn) {\n    get_current_component().$$.on_mount.push(fn);\n}\nfunction afterUpdate(fn) {\n    get_current_component().$$.after_update.push(fn);\n}\nfunction onDestroy(fn) {\n    get_current_component().$$.on_destroy.push(fn);\n}\nfunction createEventDispatcher() {\n    const component = get_current_component();\n    return (type, detail) => {\n        const callbacks = component.$$.callbacks[type];\n        if (callbacks) {\n            // TODO are there situations where events could be dispatched\n            // in a server (non-DOM) environment?\n            const event = custom_event(type, detail);\n            callbacks.slice().forEach(fn => {\n                fn.call(component, event);\n            });\n        }\n    };\n}\nfunction setContext(key, context) {\n    get_current_component().$$.context.set(key, context);\n}\nfunction getContext(key) {\n    return get_current_component().$$.context.get(key);\n}\n// TODO figure out if we still want to support\n// shorthand events, or if we want to implement\n// a real bubbling mechanism\nfunction bubble(component, event) {\n    const callbacks = component.$$.callbacks[event.type];\n    if (callbacks) {\n        callbacks.slice().forEach(fn => fn(event));\n    }\n}\n\nconst dirty_components = [];\nconst intros = { enabled: false };\nconst binding_callbacks = [];\nconst render_callbacks = [];\nconst flush_callbacks = [];\nconst resolved_promise = Promise.resolve();\nlet update_scheduled = false;\nfunction schedule_update() {\n    if (!update_scheduled) {\n        update_scheduled = true;\n        resolved_promise.then(flush);\n    }\n}\nfunction tick() {\n    schedule_update();\n    return resolved_promise;\n}\nfunction add_render_callback(fn) {\n    render_callbacks.push(fn);\n}\nfunction add_flush_callback(fn) {\n    flush_callbacks.push(fn);\n}\nlet flushing = false;\nconst seen_callbacks = new Set();\nfunction flush() {\n    if (flushing)\n        return;\n    flushing = true;\n    do {\n        // first, call beforeUpdate functions\n        // and update components\n        for (let i = 0; i < dirty_components.length; i += 1) {\n            const component = dirty_components[i];\n            set_current_component(component);\n            update(component.$$);\n        }\n        set_current_component(null);\n        dirty_components.length = 0;\n        while (binding_callbacks.length)\n            binding_callbacks.pop()();\n        // then, once components are updated, call\n        // afterUpdate functions. This may cause\n        // subsequent updates...\n        for (let i = 0; i < render_callbacks.length; i += 1) {\n            const callback = render_callbacks[i];\n            if (!seen_callbacks.has(callback)) {\n                // ...so guard against infinite loops\n                seen_callbacks.add(callback);\n                callback();\n            }\n        }\n        render_callbacks.length = 0;\n    } while (dirty_components.length);\n    while (flush_callbacks.length) {\n        flush_callbacks.pop()();\n    }\n    update_scheduled = false;\n    flushing = false;\n    seen_callbacks.clear();\n}\nfunction update($$) {\n    if ($$.fragment !== null) {\n        $$.update();\n        run_all($$.before_update);\n        const dirty = $$.dirty;\n        $$.dirty = [-1];\n        $$.fragment && $$.fragment.p($$.ctx, dirty);\n        $$.after_update.forEach(add_render_callback);\n    }\n}\n\nlet promise;\nfunction wait() {\n    if (!promise) {\n        promise = Promise.resolve();\n        promise.then(() => {\n            promise = null;\n        });\n    }\n    return promise;\n}\nfunction dispatch(node, direction, kind) {\n    node.dispatchEvent(custom_event(`${direction ? 'intro' : 'outro'}${kind}`));\n}\nconst outroing = new Set();\nlet outros;\nfunction group_outros() {\n    outros = {\n        r: 0,\n        c: [],\n        p: outros // parent group\n    };\n}\nfunction check_outros() {\n    if (!outros.r) {\n        run_all(outros.c);\n    }\n    outros = outros.p;\n}\nfunction transition_in(block, local) {\n    if (block && block.i) {\n        outroing.delete(block);\n        block.i(local);\n    }\n}\nfunction transition_out(block, local, detach, callback) {\n    if (block && block.o) {\n        if (outroing.has(block))\n            return;\n        outroing.add(block);\n        outros.c.push(() => {\n            outroing.delete(block);\n            if (callback) {\n                if (detach)\n                    block.d(1);\n                callback();\n            }\n        });\n        block.o(local);\n    }\n}\nconst null_transition = { duration: 0 };\nfunction create_in_transition(node, fn, params) {\n    let config = fn(node, params);\n    let running = false;\n    let animation_name;\n    let task;\n    let uid = 0;\n    function cleanup() {\n        if (animation_name)\n            delete_rule(node, animation_name);\n    }\n    function go() {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        if (css)\n            animation_name = create_rule(node, 0, 1, duration, delay, easing, css, uid++);\n        tick(0, 1);\n        const start_time = now() + delay;\n        const end_time = start_time + duration;\n        if (task)\n            task.abort();\n        running = true;\n        add_render_callback(() => dispatch(node, true, 'start'));\n        task = loop(now => {\n            if (running) {\n                if (now >= end_time) {\n                    tick(1, 0);\n                    dispatch(node, true, 'end');\n                    cleanup();\n                    return running = false;\n                }\n                if (now >= start_time) {\n                    const t = easing((now - start_time) / duration);\n                    tick(t, 1 - t);\n                }\n            }\n            return running;\n        });\n    }\n    let started = false;\n    return {\n        start() {\n            if (started)\n                return;\n            delete_rule(node);\n            if (is_function(config)) {\n                config = config();\n                wait().then(go);\n            }\n            else {\n                go();\n            }\n        },\n        invalidate() {\n            started = false;\n        },\n        end() {\n            if (running) {\n                cleanup();\n                running = false;\n            }\n        }\n    };\n}\nfunction create_out_transition(node, fn, params) {\n    let config = fn(node, params);\n    let running = true;\n    let animation_name;\n    const group = outros;\n    group.r += 1;\n    function go() {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        if (css)\n            animation_name = create_rule(node, 1, 0, duration, delay, easing, css);\n        const start_time = now() + delay;\n        const end_time = start_time + duration;\n        add_render_callback(() => dispatch(node, false, 'start'));\n        loop(now => {\n            if (running) {\n                if (now >= end_time) {\n                    tick(0, 1);\n                    dispatch(node, false, 'end');\n                    if (!--group.r) {\n                        // this will result in `end()` being called,\n                        // so we don't need to clean up here\n                        run_all(group.c);\n                    }\n                    return false;\n                }\n                if (now >= start_time) {\n                    const t = easing((now - start_time) / duration);\n                    tick(1 - t, t);\n                }\n            }\n            return running;\n        });\n    }\n    if (is_function(config)) {\n        wait().then(() => {\n            // @ts-ignore\n            config = config();\n            go();\n        });\n    }\n    else {\n        go();\n    }\n    return {\n        end(reset) {\n            if (reset && config.tick) {\n                config.tick(1, 0);\n            }\n            if (running) {\n                if (animation_name)\n                    delete_rule(node, animation_name);\n                running = false;\n            }\n        }\n    };\n}\nfunction create_bidirectional_transition(node, fn, params, intro) {\n    let config = fn(node, params);\n    let t = intro ? 0 : 1;\n    let running_program = null;\n    let pending_program = null;\n    let animation_name = null;\n    function clear_animation() {\n        if (animation_name)\n            delete_rule(node, animation_name);\n    }\n    function init(program, duration) {\n        const d = program.b - t;\n        duration *= Math.abs(d);\n        return {\n            a: t,\n            b: program.b,\n            d,\n            duration,\n            start: program.start,\n            end: program.start + duration,\n            group: program.group\n        };\n    }\n    function go(b) {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        const program = {\n            start: now() + delay,\n            b\n        };\n        if (!b) {\n            // @ts-ignore todo: improve typings\n            program.group = outros;\n            outros.r += 1;\n        }\n        if (running_program || pending_program) {\n            pending_program = program;\n        }\n        else {\n            // if this is an intro, and there's a delay, we need to do\n            // an initial tick and/or apply CSS animation immediately\n            if (css) {\n                clear_animation();\n                animation_name = create_rule(node, t, b, duration, delay, easing, css);\n            }\n            if (b)\n                tick(0, 1);\n            running_program = init(program, duration);\n            add_render_callback(() => dispatch(node, b, 'start'));\n            loop(now => {\n                if (pending_program && now > pending_program.start) {\n                    running_program = init(pending_program, duration);\n                    pending_program = null;\n                    dispatch(node, running_program.b, 'start');\n                    if (css) {\n                        clear_animation();\n                        animation_name = create_rule(node, t, running_program.b, running_program.duration, 0, easing, config.css);\n                    }\n                }\n                if (running_program) {\n                    if (now >= running_program.end) {\n                        tick(t = running_program.b, 1 - t);\n                        dispatch(node, running_program.b, 'end');\n                        if (!pending_program) {\n                            // we're done\n                            if (running_program.b) {\n                                // intro — we can tidy up immediately\n                                clear_animation();\n                            }\n                            else {\n                                // outro — needs to be coordinated\n                                if (!--running_program.group.r)\n                                    run_all(running_program.group.c);\n                            }\n                        }\n                        running_program = null;\n                    }\n                    else if (now >= running_program.start) {\n                        const p = now - running_program.start;\n                        t = running_program.a + running_program.d * easing(p / running_program.duration);\n                        tick(t, 1 - t);\n                    }\n                }\n                return !!(running_program || pending_program);\n            });\n        }\n    }\n    return {\n        run(b) {\n            if (is_function(config)) {\n                wait().then(() => {\n                    // @ts-ignore\n                    config = config();\n                    go(b);\n                });\n            }\n            else {\n                go(b);\n            }\n        },\n        end() {\n            clear_animation();\n            running_program = pending_program = null;\n        }\n    };\n}\n\nfunction handle_promise(promise, info) {\n    const token = info.token = {};\n    function update(type, index, key, value) {\n        if (info.token !== token)\n            return;\n        info.resolved = value;\n        let child_ctx = info.ctx;\n        if (key !== undefined) {\n            child_ctx = child_ctx.slice();\n            child_ctx[key] = value;\n        }\n        const block = type && (info.current = type)(child_ctx);\n        let needs_flush = false;\n        if (info.block) {\n            if (info.blocks) {\n                info.blocks.forEach((block, i) => {\n                    if (i !== index && block) {\n                        group_outros();\n                        transition_out(block, 1, 1, () => {\n                            info.blocks[i] = null;\n                        });\n                        check_outros();\n                    }\n                });\n            }\n            else {\n                info.block.d(1);\n            }\n            block.c();\n            transition_in(block, 1);\n            block.m(info.mount(), info.anchor);\n            needs_flush = true;\n        }\n        info.block = block;\n        if (info.blocks)\n            info.blocks[index] = block;\n        if (needs_flush) {\n            flush();\n        }\n    }\n    if (is_promise(promise)) {\n        const current_component = get_current_component();\n        promise.then(value => {\n            set_current_component(current_component);\n            update(info.then, 1, info.value, value);\n            set_current_component(null);\n        }, error => {\n            set_current_component(current_component);\n            update(info.catch, 2, info.error, error);\n            set_current_component(null);\n            if (!info.hasCatch) {\n                throw error;\n            }\n        });\n        // if we previously had a then/catch block, destroy it\n        if (info.current !== info.pending) {\n            update(info.pending, 0);\n            return true;\n        }\n    }\n    else {\n        if (info.current !== info.then) {\n            update(info.then, 1, info.value, promise);\n            return true;\n        }\n        info.resolved = promise;\n    }\n}\n\nconst globals = (typeof window !== 'undefined'\n    ? window\n    : typeof globalThis !== 'undefined'\n        ? globalThis\n        : global);\n\nfunction destroy_block(block, lookup) {\n    block.d(1);\n    lookup.delete(block.key);\n}\nfunction outro_and_destroy_block(block, lookup) {\n    transition_out(block, 1, 1, () => {\n        lookup.delete(block.key);\n    });\n}\nfunction fix_and_destroy_block(block, lookup) {\n    block.f();\n    destroy_block(block, lookup);\n}\nfunction fix_and_outro_and_destroy_block(block, lookup) {\n    block.f();\n    outro_and_destroy_block(block, lookup);\n}\nfunction update_keyed_each(old_blocks, dirty, get_key, dynamic, ctx, list, lookup, node, destroy, create_each_block, next, get_context) {\n    let o = old_blocks.length;\n    let n = list.length;\n    let i = o;\n    const old_indexes = {};\n    while (i--)\n        old_indexes[old_blocks[i].key] = i;\n    const new_blocks = [];\n    const new_lookup = new Map();\n    const deltas = new Map();\n    i = n;\n    while (i--) {\n        const child_ctx = get_context(ctx, list, i);\n        const key = get_key(child_ctx);\n        let block = lookup.get(key);\n        if (!block) {\n            block = create_each_block(key, child_ctx);\n            block.c();\n        }\n        else if (dynamic) {\n            block.p(child_ctx, dirty);\n        }\n        new_lookup.set(key, new_blocks[i] = block);\n        if (key in old_indexes)\n            deltas.set(key, Math.abs(i - old_indexes[key]));\n    }\n    const will_move = new Set();\n    const did_move = new Set();\n    function insert(block) {\n        transition_in(block, 1);\n        block.m(node, next);\n        lookup.set(block.key, block);\n        next = block.first;\n        n--;\n    }\n    while (o && n) {\n        const new_block = new_blocks[n - 1];\n        const old_block = old_blocks[o - 1];\n        const new_key = new_block.key;\n        const old_key = old_block.key;\n        if (new_block === old_block) {\n            // do nothing\n            next = new_block.first;\n            o--;\n            n--;\n        }\n        else if (!new_lookup.has(old_key)) {\n            // remove old block\n            destroy(old_block, lookup);\n            o--;\n        }\n        else if (!lookup.has(new_key) || will_move.has(new_key)) {\n            insert(new_block);\n        }\n        else if (did_move.has(old_key)) {\n            o--;\n        }\n        else if (deltas.get(new_key) > deltas.get(old_key)) {\n            did_move.add(new_key);\n            insert(new_block);\n        }\n        else {\n            will_move.add(old_key);\n            o--;\n        }\n    }\n    while (o--) {\n        const old_block = old_blocks[o];\n        if (!new_lookup.has(old_block.key))\n            destroy(old_block, lookup);\n    }\n    while (n)\n        insert(new_blocks[n - 1]);\n    return new_blocks;\n}\nfunction validate_each_keys(ctx, list, get_context, get_key) {\n    const keys = new Set();\n    for (let i = 0; i < list.length; i++) {\n        const key = get_key(get_context(ctx, list, i));\n        if (keys.has(key)) {\n            throw new Error(`Cannot have duplicate keys in a keyed each`);\n        }\n        keys.add(key);\n    }\n}\n\nfunction get_spread_update(levels, updates) {\n    const update = {};\n    const to_null_out = {};\n    const accounted_for = { $$scope: 1 };\n    let i = levels.length;\n    while (i--) {\n        const o = levels[i];\n        const n = updates[i];\n        if (n) {\n            for (const key in o) {\n                if (!(key in n))\n                    to_null_out[key] = 1;\n            }\n            for (const key in n) {\n                if (!accounted_for[key]) {\n                    update[key] = n[key];\n                    accounted_for[key] = 1;\n                }\n            }\n            levels[i] = n;\n        }\n        else {\n            for (const key in o) {\n                accounted_for[key] = 1;\n            }\n        }\n    }\n    for (const key in to_null_out) {\n        if (!(key in update))\n            update[key] = undefined;\n    }\n    return update;\n}\nfunction get_spread_object(spread_props) {\n    return typeof spread_props === 'object' && spread_props !== null ? spread_props : {};\n}\n\n// source: https://html.spec.whatwg.org/multipage/indices.html\nconst boolean_attributes = new Set([\n    'allowfullscreen',\n    'allowpaymentrequest',\n    'async',\n    'autofocus',\n    'autoplay',\n    'checked',\n    'controls',\n    'default',\n    'defer',\n    'disabled',\n    'formnovalidate',\n    'hidden',\n    'ismap',\n    'loop',\n    'multiple',\n    'muted',\n    'nomodule',\n    'novalidate',\n    'open',\n    'playsinline',\n    'readonly',\n    'required',\n    'reversed',\n    'selected'\n]);\n\nconst invalid_attribute_name_character = /[\\s'\">/=\\u{FDD0}-\\u{FDEF}\\u{FFFE}\\u{FFFF}\\u{1FFFE}\\u{1FFFF}\\u{2FFFE}\\u{2FFFF}\\u{3FFFE}\\u{3FFFF}\\u{4FFFE}\\u{4FFFF}\\u{5FFFE}\\u{5FFFF}\\u{6FFFE}\\u{6FFFF}\\u{7FFFE}\\u{7FFFF}\\u{8FFFE}\\u{8FFFF}\\u{9FFFE}\\u{9FFFF}\\u{AFFFE}\\u{AFFFF}\\u{BFFFE}\\u{BFFFF}\\u{CFFFE}\\u{CFFFF}\\u{DFFFE}\\u{DFFFF}\\u{EFFFE}\\u{EFFFF}\\u{FFFFE}\\u{FFFFF}\\u{10FFFE}\\u{10FFFF}]/u;\n// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2\n// https://infra.spec.whatwg.org/#noncharacter\nfunction spread(args, classes_to_add) {\n    const attributes = Object.assign({}, ...args);\n    if (classes_to_add) {\n        if (attributes.class == null) {\n            attributes.class = classes_to_add;\n        }\n        else {\n            attributes.class += ' ' + classes_to_add;\n        }\n    }\n    let str = '';\n    Object.keys(attributes).forEach(name => {\n        if (invalid_attribute_name_character.test(name))\n            return;\n        const value = attributes[name];\n        if (value === true)\n            str += \" \" + name;\n        else if (boolean_attributes.has(name.toLowerCase())) {\n            if (value)\n                str += \" \" + name;\n        }\n        else if (value != null) {\n            str += ` ${name}=\"${String(value).replace(/\"/g, '&#34;').replace(/'/g, '&#39;')}\"`;\n        }\n    });\n    return str;\n}\nconst escaped = {\n    '\"': '&quot;',\n    \"'\": '&#39;',\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;'\n};\nfunction escape(html) {\n    return String(html).replace(/[\"'&<>]/g, match => escaped[match]);\n}\nfunction each(items, fn) {\n    let str = '';\n    for (let i = 0; i < items.length; i += 1) {\n        str += fn(items[i], i);\n    }\n    return str;\n}\nconst missing_component = {\n    $$render: () => ''\n};\nfunction validate_component(component, name) {\n    if (!component || !component.$$render) {\n        if (name === 'svelte:component')\n            name += ' this={...}';\n        throw new Error(`<${name}> is not a valid SSR component. You may need to review your build config to ensure that dependencies are compiled, rather than imported as pre-compiled modules`);\n    }\n    return component;\n}\nfunction debug(file, line, column, values) {\n    console.log(`{@debug} ${file ? file + ' ' : ''}(${line}:${column})`); // eslint-disable-line no-console\n    console.log(values); // eslint-disable-line no-console\n    return '';\n}\nlet on_destroy;\nfunction create_ssr_component(fn) {\n    function $$render(result, props, bindings, slots) {\n        const parent_component = current_component;\n        const $$ = {\n            on_destroy,\n            context: new Map(parent_component ? parent_component.$$.context : []),\n            // these will be immediately discarded\n            on_mount: [],\n            before_update: [],\n            after_update: [],\n            callbacks: blank_object()\n        };\n        set_current_component({ $$ });\n        const html = fn(result, props, bindings, slots);\n        set_current_component(parent_component);\n        return html;\n    }\n    return {\n        render: (props = {}, options = {}) => {\n            on_destroy = [];\n            const result = { title: '', head: '', css: new Set() };\n            const html = $$render(result, props, {}, options);\n            run_all(on_destroy);\n            return {\n                html,\n                css: {\n                    code: Array.from(result.css).map(css => css.code).join('\\n'),\n                    map: null // TODO\n                },\n                head: result.title + result.head\n            };\n        },\n        $$render\n    };\n}\nfunction add_attribute(name, value, boolean) {\n    if (value == null || (boolean && !value))\n        return '';\n    return ` ${name}${value === true ? '' : `=${typeof value === 'string' ? JSON.stringify(escape(value)) : `\"${value}\"`}`}`;\n}\nfunction add_classes(classes) {\n    return classes ? ` class=\"${classes}\"` : ``;\n}\n\nfunction bind(component, name, callback) {\n    const index = component.$$.props[name];\n    if (index !== undefined) {\n        component.$$.bound[index] = callback;\n        callback(component.$$.ctx[index]);\n    }\n}\nfunction create_component(block) {\n    block && block.c();\n}\nfunction claim_component(block, parent_nodes) {\n    block && block.l(parent_nodes);\n}\nfunction mount_component(component, target, anchor) {\n    const { fragment, on_mount, on_destroy, after_update } = component.$$;\n    fragment && fragment.m(target, anchor);\n    // onMount happens before the initial afterUpdate\n    add_render_callback(() => {\n        const new_on_destroy = on_mount.map(run).filter(is_function);\n        if (on_destroy) {\n            on_destroy.push(...new_on_destroy);\n        }\n        else {\n            // Edge case - component was destroyed immediately,\n            // most likely as a result of a binding initialising\n            run_all(new_on_destroy);\n        }\n        component.$$.on_mount = [];\n    });\n    after_update.forEach(add_render_callback);\n}\nfunction destroy_component(component, detaching) {\n    const $$ = component.$$;\n    if ($$.fragment !== null) {\n        run_all($$.on_destroy);\n        $$.fragment && $$.fragment.d(detaching);\n        // TODO null out other refs, including component.$$ (but need to\n        // preserve final state?)\n        $$.on_destroy = $$.fragment = null;\n        $$.ctx = [];\n    }\n}\nfunction make_dirty(component, i) {\n    if (component.$$.dirty[0] === -1) {\n        dirty_components.push(component);\n        schedule_update();\n        component.$$.dirty.fill(0);\n    }\n    component.$$.dirty[(i / 31) | 0] |= (1 << (i % 31));\n}\nfunction init(component, options, instance, create_fragment, not_equal, props, dirty = [-1]) {\n    const parent_component = current_component;\n    set_current_component(component);\n    const prop_values = options.props || {};\n    const $$ = component.$$ = {\n        fragment: null,\n        ctx: null,\n        // state\n        props,\n        update: noop,\n        not_equal,\n        bound: blank_object(),\n        // lifecycle\n        on_mount: [],\n        on_destroy: [],\n        before_update: [],\n        after_update: [],\n        context: new Map(parent_component ? parent_component.$$.context : []),\n        // everything else\n        callbacks: blank_object(),\n        dirty,\n        skip_bound: false\n    };\n    let ready = false;\n    $$.ctx = instance\n        ? instance(component, prop_values, (i, ret, ...rest) => {\n            const value = rest.length ? rest[0] : ret;\n            if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {\n                if (!$$.skip_bound && $$.bound[i])\n                    $$.bound[i](value);\n                if (ready)\n                    make_dirty(component, i);\n            }\n            return ret;\n        })\n        : [];\n    $$.update();\n    ready = true;\n    run_all($$.before_update);\n    // `false` as a special case of no DOM component\n    $$.fragment = create_fragment ? create_fragment($$.ctx) : false;\n    if (options.target) {\n        if (options.hydrate) {\n            const nodes = children(options.target);\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            $$.fragment && $$.fragment.l(nodes);\n            nodes.forEach(detach);\n        }\n        else {\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            $$.fragment && $$.fragment.c();\n        }\n        if (options.intro)\n            transition_in(component.$$.fragment);\n        mount_component(component, options.target, options.anchor);\n        flush();\n    }\n    set_current_component(parent_component);\n}\nlet SvelteElement;\nif (typeof HTMLElement === 'function') {\n    SvelteElement = class extends HTMLElement {\n        constructor() {\n            super();\n            this.attachShadow({ mode: 'open' });\n        }\n        connectedCallback() {\n            // @ts-ignore todo: improve typings\n            for (const key in this.$$.slotted) {\n                // @ts-ignore todo: improve typings\n                this.appendChild(this.$$.slotted[key]);\n            }\n        }\n        attributeChangedCallback(attr, _oldValue, newValue) {\n            this[attr] = newValue;\n        }\n        $destroy() {\n            destroy_component(this, 1);\n            this.$destroy = noop;\n        }\n        $on(type, callback) {\n            // TODO should this delegate to addEventListener?\n            const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));\n            callbacks.push(callback);\n            return () => {\n                const index = callbacks.indexOf(callback);\n                if (index !== -1)\n                    callbacks.splice(index, 1);\n            };\n        }\n        $set($$props) {\n            if (this.$$set && !is_empty($$props)) {\n                this.$$.skip_bound = true;\n                this.$$set($$props);\n                this.$$.skip_bound = false;\n            }\n        }\n    };\n}\nclass SvelteComponent {\n    $destroy() {\n        destroy_component(this, 1);\n        this.$destroy = noop;\n    }\n    $on(type, callback) {\n        const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));\n        callbacks.push(callback);\n        return () => {\n            const index = callbacks.indexOf(callback);\n            if (index !== -1)\n                callbacks.splice(index, 1);\n        };\n    }\n    $set($$props) {\n        if (this.$$set && !is_empty($$props)) {\n            this.$$.skip_bound = true;\n            this.$$set($$props);\n            this.$$.skip_bound = false;\n        }\n    }\n}\n\nfunction dispatch_dev(type, detail) {\n    document.dispatchEvent(custom_event(type, Object.assign({ version: '3.29.0' }, detail)));\n}\nfunction append_dev(target, node) {\n    dispatch_dev(\"SvelteDOMInsert\", { target, node });\n    append(target, node);\n}\nfunction insert_dev(target, node, anchor) {\n    dispatch_dev(\"SvelteDOMInsert\", { target, node, anchor });\n    insert(target, node, anchor);\n}\nfunction detach_dev(node) {\n    dispatch_dev(\"SvelteDOMRemove\", { node });\n    detach(node);\n}\nfunction detach_between_dev(before, after) {\n    while (before.nextSibling && before.nextSibling !== after) {\n        detach_dev(before.nextSibling);\n    }\n}\nfunction detach_before_dev(after) {\n    while (after.previousSibling) {\n        detach_dev(after.previousSibling);\n    }\n}\nfunction detach_after_dev(before) {\n    while (before.nextSibling) {\n        detach_dev(before.nextSibling);\n    }\n}\nfunction listen_dev(node, event, handler, options, has_prevent_default, has_stop_propagation) {\n    const modifiers = options === true ? [\"capture\"] : options ? Array.from(Object.keys(options)) : [];\n    if (has_prevent_default)\n        modifiers.push('preventDefault');\n    if (has_stop_propagation)\n        modifiers.push('stopPropagation');\n    dispatch_dev(\"SvelteDOMAddEventListener\", { node, event, handler, modifiers });\n    const dispose = listen(node, event, handler, options);\n    return () => {\n        dispatch_dev(\"SvelteDOMRemoveEventListener\", { node, event, handler, modifiers });\n        dispose();\n    };\n}\nfunction attr_dev(node, attribute, value) {\n    attr(node, attribute, value);\n    if (value == null)\n        dispatch_dev(\"SvelteDOMRemoveAttribute\", { node, attribute });\n    else\n        dispatch_dev(\"SvelteDOMSetAttribute\", { node, attribute, value });\n}\nfunction prop_dev(node, property, value) {\n    node[property] = value;\n    dispatch_dev(\"SvelteDOMSetProperty\", { node, property, value });\n}\nfunction dataset_dev(node, property, value) {\n    node.dataset[property] = value;\n    dispatch_dev(\"SvelteDOMSetDataset\", { node, property, value });\n}\nfunction set_data_dev(text, data) {\n    data = '' + data;\n    if (text.wholeText === data)\n        return;\n    dispatch_dev(\"SvelteDOMSetData\", { node: text, data });\n    text.data = data;\n}\nfunction validate_each_argument(arg) {\n    if (typeof arg !== 'string' && !(arg && typeof arg === 'object' && 'length' in arg)) {\n        let msg = '{#each} only iterates over array-like objects.';\n        if (typeof Symbol === 'function' && arg && Symbol.iterator in arg) {\n            msg += ' You can use a spread to convert this iterable into an array.';\n        }\n        throw new Error(msg);\n    }\n}\nfunction validate_slots(name, slot, keys) {\n    for (const slot_key of Object.keys(slot)) {\n        if (!~keys.indexOf(slot_key)) {\n            console.warn(`<${name}> received an unexpected slot \"${slot_key}\".`);\n        }\n    }\n}\nclass SvelteComponentDev extends SvelteComponent {\n    constructor(options) {\n        if (!options || (!options.target && !options.$$inline)) {\n            throw new Error(`'target' is a required option`);\n        }\n        super();\n    }\n    $destroy() {\n        super.$destroy();\n        this.$destroy = () => {\n            console.warn(`Component was already destroyed`); // eslint-disable-line no-console\n        };\n    }\n    $capture_state() { }\n    $inject_state() { }\n}\nfunction loop_guard(timeout) {\n    const start = Date.now();\n    return () => {\n        if (Date.now() - start > timeout) {\n            throw new Error(`Infinite loop detected`);\n        }\n    };\n}\n\nexport { HtmlTag, SvelteComponent, SvelteComponentDev, SvelteElement, action_destroyer, add_attribute, add_classes, add_flush_callback, add_location, add_render_callback, add_resize_listener, add_transform, afterUpdate, append, append_dev, assign, attr, attr_dev, beforeUpdate, bind, binding_callbacks, blank_object, bubble, check_outros, children, claim_component, claim_element, claim_space, claim_text, clear_loops, component_subscribe, compute_rest_props, compute_slots, createEventDispatcher, create_animation, create_bidirectional_transition, create_component, create_in_transition, create_out_transition, create_slot, create_ssr_component, current_component, custom_event, dataset_dev, debug, destroy_block, destroy_component, destroy_each, detach, detach_after_dev, detach_before_dev, detach_between_dev, detach_dev, dirty_components, dispatch_dev, each, element, element_is, empty, escape, escaped, exclude_internal_props, fix_and_destroy_block, fix_and_outro_and_destroy_block, fix_position, flush, getContext, get_binding_group_value, get_current_component, get_slot_changes, get_slot_context, get_spread_object, get_spread_update, get_store_value, globals, group_outros, handle_promise, has_prop, identity, init, insert, insert_dev, intros, invalid_attribute_name_character, is_client, is_crossorigin, is_empty, is_function, is_promise, listen, listen_dev, loop, loop_guard, missing_component, mount_component, noop, not_equal, now, null_to_empty, object_without_properties, onDestroy, onMount, once, outro_and_destroy_block, prevent_default, prop_dev, query_selector_all, raf, run, run_all, safe_not_equal, schedule_update, select_multiple_value, select_option, select_options, select_value, self, setContext, set_attributes, set_current_component, set_custom_element_data, set_data, set_data_dev, set_input_type, set_input_value, set_now, set_raf, set_store_value, set_style, set_svg_attributes, space, spread, stop_propagation, subscribe, svg_element, text, tick, time_ranges_to_array, to_number, toggle_class, transition_in, transition_out, update_keyed_each, update_slot, validate_component, validate_each_argument, validate_each_keys, validate_slots, validate_store, xlink_attr };\n","<script>\n    export let tapes;\n    export let tapeIndex;\n    const tapeSize = 32;\n    $: indexPositionStyle = `margin-left: ${6 + tapeIndex * tapeSize}px`;\n</script>\n\n<section id=\"bf-interface-machine-state\">\n    <div id=\"bf-interface-state-block\" style=\"display: inline-block\">\n        <ul class=\"tape\">\n            {#each tapes as tp}\n            <li>\n                {tp}\n            </li>\n            {/each}\n            <li class=\"tape-elem-rightmost\">(...)</li>\n        </ul>\n        <div class=\"tape-pointer\" style={indexPositionStyle}>\n            <em>\n            </em>\n        </div>\n    </div>\n\n</section>\n\n<style>\n\n    section {\n        /* justify-content: center; */\n        margin-top: 40px;\n        margin-left: 20px;\n    }\n\n    #bf-interface-state-block {\n        width: 720px;\n        text-align: center;\n    }\n\n    div.tape-pointer {\n        width: 31px;\n    }\n\n    div.tape-pointer em {\n        background-color: #ff3e00;\n        display: block;\n        width: 10px;\n        height: 15px;\n        margin-top: 6px;\n        margin-left: 10px;\n\n    }\n\n    div.tape-pointer em::before {\n        content: \"\";\n        background-color: #ff3e00;\n        display: block;\n        width: 0;\n        height: 0;\n        border-left: 5px solid transparent;\n        border-right: 5px solid transparent;\n        border-bottom: 5px solid #ff3e00;\n        margin-top: -5px;\n\n    }\n\n    ul.tape {\n        display: block;\n        list-style-type: disc;\n        overflow: hidden;\n        padding: 0;\n        height: 32px;\n    }\n    ul {\n        display: block;\n        list-style-type: disc;\n        margin-inline-start: 0px;\n        margin-inline-end: 0px;\n        padding-inline-start: 40px;\n    }\n\n    ul.tape li {\n        display: inline-block;\n        list-style-type: none;\n        border: 1px solid #aeaeae;\n        width: 30px;\n        height: 23px;\n        text-align: center;\n        padding-top: 7px;\n        /* border-right: none; */\n        color: gray;\n    }\n\n</style>\n","import { noop, safe_not_equal, subscribe, run_all, is_function } from '../internal';\nexport { get_store_value as get } from '../internal';\n\nconst subscriber_queue = [];\n/**\n * Creates a `Readable` store that allows reading by subscription.\n * @param value initial value\n * @param {StartStopNotifier}start start and stop notifications for subscriptions\n */\nfunction readable(value, start) {\n    return {\n        subscribe: writable(value, start).subscribe\n    };\n}\n/**\n * Create a `Writable` store that allows both updating and reading by subscription.\n * @param {*=}value initial value\n * @param {StartStopNotifier=}start start and stop notifications for subscriptions\n */\nfunction writable(value, start = noop) {\n    let stop;\n    const subscribers = [];\n    function set(new_value) {\n        if (safe_not_equal(value, new_value)) {\n            value = new_value;\n            if (stop) { // store is ready\n                const run_queue = !subscriber_queue.length;\n                for (let i = 0; i < subscribers.length; i += 1) {\n                    const s = subscribers[i];\n                    s[1]();\n                    subscriber_queue.push(s, value);\n                }\n                if (run_queue) {\n                    for (let i = 0; i < subscriber_queue.length; i += 2) {\n                        subscriber_queue[i][0](subscriber_queue[i + 1]);\n                    }\n                    subscriber_queue.length = 0;\n                }\n            }\n        }\n    }\n    function update(fn) {\n        set(fn(value));\n    }\n    function subscribe(run, invalidate = noop) {\n        const subscriber = [run, invalidate];\n        subscribers.push(subscriber);\n        if (subscribers.length === 1) {\n            stop = start(set) || noop;\n        }\n        run(value);\n        return () => {\n            const index = subscribers.indexOf(subscriber);\n            if (index !== -1) {\n                subscribers.splice(index, 1);\n            }\n            if (subscribers.length === 0) {\n                stop();\n                stop = null;\n            }\n        };\n    }\n    return { set, update, subscribe };\n}\nfunction derived(stores, fn, initial_value) {\n    const single = !Array.isArray(stores);\n    const stores_array = single\n        ? [stores]\n        : stores;\n    const auto = fn.length < 2;\n    return readable(initial_value, (set) => {\n        let inited = false;\n        const values = [];\n        let pending = 0;\n        let cleanup = noop;\n        const sync = () => {\n            if (pending) {\n                return;\n            }\n            cleanup();\n            const result = fn(single ? values[0] : values, set);\n            if (auto) {\n                set(result);\n            }\n            else {\n                cleanup = is_function(result) ? result : noop;\n            }\n        };\n        const unsubscribers = stores_array.map((store, i) => subscribe(store, (value) => {\n            values[i] = value;\n            pending &= ~(1 << i);\n            if (inited) {\n                sync();\n            }\n        }, () => {\n            pending |= (1 << i);\n        }));\n        inited = true;\n        sync();\n        return function stop() {\n            run_all(unsubscribers);\n            cleanup();\n        };\n    });\n}\n\nexport { derived, readable, writable };\n","import { writable } from 'svelte/store';\n\nexport const programInput = writable(\"\");\n","<script>\n    import { programInput } from './inputStore';\n\n    export let isRunning;\n    export let curIndex;\n\n    let inputText = \"\";\n    let displayElem = \"\";\n    $: {\n        inputText = $programInput;\n        console.log(`input: ${inputText}`);\n    }\n    $: if (isRunning && (curIndex >= 0 && curIndex < inputText.length)) {\n        let head = inputText.slice(0, curIndex);\n        let caratChar = inputText[curIndex];\n        let tail = inputText.slice(curIndex + 1);\n        displayElem = head + `<span id=\"bf-program-caret\" class=\"carat\">${caratChar}</span>` + tail;\n    }\n</script>\n\n<div id=\"bf-interface-input-area\">\n    {#if !isRunning}\n    <textarea id=\"bf-input-program\" name=\"bf-program-input\" bind:value={$programInput} ></textarea>\n    {:else}\n    <div id=\"bf-interface-program-preview\">\n        {@html displayElem}\n    </div>\n    <span id=\"bf-program-caret\" class=\"caret\" style=\"display: none\"></span>\n    {/if}\n</div>\n\n<style>\n    #bf-interface-program-preview, #bf-input-program {\n        display: block;\n        background-color: beige;\n        font-family: monospace;\n\t\tmargin: 0 auto;\n        padding: 0.4em;\n        width: 480px;\n        height: 400px;\n        border: 3px solid #3e3e3e;\n        font-size: 16px;\n        text-align: start;\n        word-break: break-all;\n    }\n    :global(#bf-program-caret) {\n        border-radius: 4px;\n        background-color: rgb(243, 89, 243);\n        color: black;\n    }\n</style>","<script>\n    import BfMachineState from './BfMachineState.svelte';\n    import BfProgramInputBox from './BfProgramInputBox.svelte';\n    import { programInput } from './inputStore';\n\n    export let state;\n\texport let program;\n    export let newState;\n    export let presets;\n\n    let inputStr = \"\";\n    const outputPlaceholder = \"(stream output shows here)\";\n    let outputStr = outputPlaceholder;\n    let showDec = false;\n\n    let machineInstance = {};\n    let errorStr = \"\";\n    let programIndex = 0;\n\n    let paused = true;\n    const STEP_INTERVAL_MS = 125;\n\n    $: tapes = state.get_display_tapes(32);\n    $: tapeIndex = state.get_index();\n\n    function sleep(ms) {\n\t\treturn new Promise(resolve => setTimeout(resolve, ms));\n    }\n\n    function isU8(ch) {\n        return !isNaN(ch)\n            && !isNaN(parseFloat(ch))\n            && parseInt(ch) >= 0\n            && parseInt(ch) < 256;\n    }\n\n    function pushInput(machine) {\n        let splitted = inputStr.split(/[\\s,]+/);\n        // console.log(splitted);\n\n        if (!splitted.every((n) => isU8(n))) {\n            return false;\n        }\n\n        machine.push_input(splitted.map(n => parseInt(n)));\n        return true;\n    }\n\n    async function step() {\n        try {\n            machineInstance.step(state);\n            outputStr = showDec ? state.output_dec() : state.output();\n            errorStr = \"\";\n            state = state;\n            programIndex = machineInstance.get_index();\n            await sleep(STEP_INTERVAL_MS);\n        } catch (ex) {\n            console.error(ex);\n            errorStr = ex.toString();\n        }\n    }\n\n    async function run() {\n        if (!$programInput) {\n            errorStr = \"The program is empty!\";\n            return;\n        }\n\n        try {\n            paused = false;\n            state = newState();\n            machineInstance = program.parse($programInput);\n            if (machineInstance.needs_input()) {\n                if (!inputStr) {\n                    throw new Error(\"The input is empty!\");\n                }\n\n                if (!pushInput(state)) {\n                    throw new Error(\"Invalid input: should be a space/comma separated unsigned 8-bit integers!\");\n                }\n\n            }\n\n            // push input box update first\n            state = state;\n            await sleep(STEP_INTERVAL_MS);\n            \n            while (!paused && machineInstance.can_execute(state)) {\n                await step();\n            }\n\n            paused = true;\n            programIndex = 0;\n        } catch (ex) {\n            console.error(ex);\n            errorStr = ex.toString();\n        }\n    }\n\n    function runPresets(preset) {\n        if (!preset) {\n            return;\n        }\n\n        $programInput = preset.program;\n        showDec = preset.outputAsDec;\n        if (preset.inputs) {\n            inputStr = preset.inputs;\n        }\n    }\n\n    function reset() {\n        paused = true;\n        machineInstance.reset();\n        state.reset();\n        state = state;\n    }\n</script>\n\n<div id=\"bf-interface\">\n    <BfProgramInputBox\n        isRunning=\"{!paused}\"\n        curIndex=\"{programIndex}\"\n    />\n    <button class=\"bf-button-input\" type=\"button\" on:click={run} disabled={!paused}>\n        {#if paused} Run {:else} Running... {/if}\n    </button>\n    <button class=\"bf-button-input\" type=\"button\" on:click={reset}>Reset</button>\n    <BfMachineState \n        tapes={tapes}\n        tapeIndex={tapeIndex}\n    />\n    <section class=\"bf-interface-io\">\n        <div id=\"bf-interface-input-area\">\n            Input:\n            <textarea id=\"bf-input-stream\" bind:value={inputStr}></textarea>\n        </div>\n        <div id=\"bf-interface-output-area\">\n            Output:\n            <textarea id=\"bf-output-stream\" name=\"bf-output-stream\" readonly>{outputStr}</textarea>\n            <br>\n            <input type=\"checkbox\" id=\"bf-output-print-hex\" bind:checked={showDec}/><label for=\"bf-output-print-hex\">Print in dec</label>\n        </div>\n        <div id=\"bf-interface-errors\">\n            {#if errorStr}\n            <div id=\"bf-interface-error-box\">{errorStr}</div>\n            {/if}\n        </div>\n    </section>\n    <section class=\"bf-interface-preset\">\n        <div id=\"bf-interface-presets\">\n            <ul class=\"presets\">\n                {#each presets as ps}\n                    <li>\n                        <button on:click={runPresets(ps)}>{ps.description}</button>\n                    </li>\n                {/each}\n            </ul>\n\n        </div>\n    </section>\n</div>\n\n<style>\n    section {\n        display: block;\n    }\n\n    ul.presets li {\n        display: inline-block;\n        list-style-type: none;\n        height: 23px;\n        text-align: center;\n        padding-top: 7px;\n        padding-left: 10px;\n        color: gray;\n    }\n\n\t#bf-interface {\n\t\ttext-align: center;\n\t\tpadding: 1em;\n\t\tmargin: 0 auto;\n\t}\n\n    #bf-interface-error-box {\n        background-color: #ff3e00;\n        color: beige;\n        padding: 1em;\n\t\tmargin: 0 auto;\n    }\n</style>","<script>\n\timport BfInterface from './BfInterface.svelte';\n\texport let state;\n\texport let program;\n\texport let newState;\n\texport let presets;\n</script>\n\n<main>\n\t<h1>brainf-wasm</h1>\n\t<p>A BrainF*ck Interpreter compiled into WASM loaded on Svelte</p>\n\t<p>Visit the <a href=\"https://svelte.dev/tutorial\">Svelte tutorial</a> to learn how to build Svelte apps.</p>\n\t<BfInterface state={state} program={program} newState={newState} presets={presets} />\n</main>\n\n<style>\n\tmain {\n\t\ttext-align: center;\n\t\tpadding: 1em;\n\t\t/* max-width: 240px; */\n\t\tmargin: 0 auto;\n\t}\n\n\th1 {\n\t\tcolor: #ff3e00;\n\t\ttext-transform: uppercase;\n\t\tfont-size: 4em;\n\t\tfont-weight: 100;\n\t}\n\n\t@media (min-width: 640px) {\n\t\tmain {\n\t\t\tmax-width: none;\n\t\t}\n\t}\n</style>","\nlet wasm;\n\nconst heap = new Array(32).fill(undefined);\n\nheap.push(undefined, null, true, false);\n\nfunction getObject(idx) { return heap[idx]; }\n\nlet heap_next = heap.length;\n\nfunction dropObject(idx) {\n    if (idx < 36) return;\n    heap[idx] = heap_next;\n    heap_next = idx;\n}\n\nfunction takeObject(idx) {\n    const ret = getObject(idx);\n    dropObject(idx);\n    return ret;\n}\n\nlet cachedTextDecoder = new TextDecoder('utf-8', { ignoreBOM: true, fatal: true });\n\ncachedTextDecoder.decode();\n\nlet cachegetUint8Memory0 = null;\nfunction getUint8Memory0() {\n    if (cachegetUint8Memory0 === null || cachegetUint8Memory0.buffer !== wasm.memory.buffer) {\n        cachegetUint8Memory0 = new Uint8Array(wasm.memory.buffer);\n    }\n    return cachegetUint8Memory0;\n}\n\nfunction getStringFromWasm0(ptr, len) {\n    return cachedTextDecoder.decode(getUint8Memory0().subarray(ptr, ptr + len));\n}\n\nfunction addHeapObject(obj) {\n    if (heap_next === heap.length) heap.push(heap.length + 1);\n    const idx = heap_next;\n    heap_next = heap[idx];\n\n    heap[idx] = obj;\n    return idx;\n}\n\nlet cachegetInt32Memory0 = null;\nfunction getInt32Memory0() {\n    if (cachegetInt32Memory0 === null || cachegetInt32Memory0.buffer !== wasm.memory.buffer) {\n        cachegetInt32Memory0 = new Int32Array(wasm.memory.buffer);\n    }\n    return cachegetInt32Memory0;\n}\n/**\n* @returns {string}\n*/\nexport function greet() {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        wasm.greet(retptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        return getStringFromWasm0(r0, r1);\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n        wasm.__wbindgen_free(r0, r1);\n    }\n}\n\nlet WASM_VECTOR_LEN = 0;\n\nfunction passArray8ToWasm0(arg, malloc) {\n    const ptr = malloc(arg.length * 1);\n    getUint8Memory0().set(arg, ptr / 1);\n    WASM_VECTOR_LEN = arg.length;\n    return ptr;\n}\n\nfunction getArrayU8FromWasm0(ptr, len) {\n    return getUint8Memory0().subarray(ptr / 1, ptr / 1 + len);\n}\n\nlet cachedTextEncoder = new TextEncoder('utf-8');\n\nconst encodeString = (typeof cachedTextEncoder.encodeInto === 'function'\n    ? function (arg, view) {\n    return cachedTextEncoder.encodeInto(arg, view);\n}\n    : function (arg, view) {\n    const buf = cachedTextEncoder.encode(arg);\n    view.set(buf);\n    return {\n        read: arg.length,\n        written: buf.length\n    };\n});\n\nfunction passStringToWasm0(arg, malloc, realloc) {\n\n    if (realloc === undefined) {\n        const buf = cachedTextEncoder.encode(arg);\n        const ptr = malloc(buf.length);\n        getUint8Memory0().subarray(ptr, ptr + buf.length).set(buf);\n        WASM_VECTOR_LEN = buf.length;\n        return ptr;\n    }\n\n    let len = arg.length;\n    let ptr = malloc(len);\n\n    const mem = getUint8Memory0();\n\n    let offset = 0;\n\n    for (; offset < len; offset++) {\n        const code = arg.charCodeAt(offset);\n        if (code > 0x7F) break;\n        mem[ptr + offset] = code;\n    }\n\n    if (offset !== len) {\n        if (offset !== 0) {\n            arg = arg.slice(offset);\n        }\n        ptr = realloc(ptr, len, len = offset + arg.length * 3);\n        const view = getUint8Memory0().subarray(ptr + offset, ptr + len);\n        const ret = encodeString(arg, view);\n\n        offset += ret.written;\n    }\n\n    WASM_VECTOR_LEN = offset;\n    return ptr;\n}\n\nfunction _assertClass(instance, klass) {\n    if (!(instance instanceof klass)) {\n        throw new Error(`expected instance of ${klass.name}`);\n    }\n    return instance.ptr;\n}\n/**\n*/\nexport class BfMachineState {\n\n    static __wrap(ptr) {\n        const obj = Object.create(BfMachineState.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_bfmachinestate_free(ptr);\n    }\n    /**\n    * @returns {BfMachineState}\n    */\n    static new() {\n        var ret = wasm.bfmachinestate_new();\n        return BfMachineState.__wrap(ret);\n    }\n    /**\n    */\n    reset() {\n        wasm.bfmachinestate_reset(this.ptr);\n    }\n    /**\n    * @returns {string}\n    */\n    output() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.bfmachinestate_output(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * @returns {string}\n    */\n    output_dec() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.bfmachinestate_output_dec(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * @returns {number}\n    */\n    get_index() {\n        var ret = wasm.bfmachinestate_get_index(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @param {Uint8Array} inputs\n    */\n    push_input(inputs) {\n        var ptr0 = passArray8ToWasm0(inputs, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.bfmachinestate_push_input(this.ptr, ptr0, len0);\n    }\n    /**\n    * @returns {number | undefined}\n    */\n    get_input() {\n        var ret = wasm.bfmachinestate_get_input(this.ptr);\n        return ret === 0xFFFFFF ? undefined : ret;\n    }\n    /**\n    * @returns {number | undefined}\n    */\n    log_input() {\n        var ret = wasm.bfmachinestate_log_input(this.ptr);\n        return ret === 0xFFFFFF ? undefined : ret;\n    }\n    /**\n    * @param {number} i\n    * @returns {number | undefined}\n    */\n    get_tape_value(i) {\n        var ret = wasm.bfmachinestate_get_tape_value(this.ptr, i);\n        return ret === 0xFFFFFF ? undefined : ret;\n    }\n    /**\n    * @param {number} i\n    * @returns {Uint8Array}\n    */\n    get_display_tapes(i) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.bfmachinestate_get_display_tapes(retptr, this.ptr, i);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n/**\n*/\nexport class BfProgram {\n\n    static __wrap(ptr) {\n        const obj = Object.create(BfProgram.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_bfprogram_free(ptr);\n    }\n    /**\n    * @param {string} prg\n    * @returns {BfProgram}\n    */\n    static parse(prg) {\n        var ptr0 = passStringToWasm0(prg, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.bfprogram_parse(ptr0, len0);\n        return BfProgram.__wrap(ret);\n    }\n    /**\n    * @param {BfMachineState} state\n    */\n    step(state) {\n        _assertClass(state, BfMachineState);\n        wasm.bfprogram_step(this.ptr, state.ptr);\n    }\n    /**\n    * @param {BfMachineState} state\n    */\n    execute(state) {\n        _assertClass(state, BfMachineState);\n        wasm.bfprogram_execute(this.ptr, state.ptr);\n    }\n    /**\n    */\n    reset() {\n        wasm.bfprogram_reset(this.ptr);\n    }\n    /**\n    * @returns {boolean}\n    */\n    needs_input() {\n        var ret = wasm.bfprogram_needs_input(this.ptr);\n        return ret !== 0;\n    }\n    /**\n    * @returns {number}\n    */\n    get_index() {\n        var ret = wasm.bfprogram_get_index(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @param {BfMachineState} state\n    * @returns {boolean}\n    */\n    can_execute(state) {\n        _assertClass(state, BfMachineState);\n        var ret = wasm.bfprogram_can_execute(this.ptr, state.ptr);\n        return ret !== 0;\n    }\n}\n\nasync function load(module, imports) {\n    if (typeof Response === 'function' && module instanceof Response) {\n        if (typeof WebAssembly.instantiateStreaming === 'function') {\n            try {\n                return await WebAssembly.instantiateStreaming(module, imports);\n\n            } catch (e) {\n                if (module.headers.get('Content-Type') != 'application/wasm') {\n                    console.warn(\"`WebAssembly.instantiateStreaming` failed because your server does not serve wasm with `application/wasm` MIME type. Falling back to `WebAssembly.instantiate` which is slower. Original error:\\n\", e);\n\n                } else {\n                    throw e;\n                }\n            }\n        }\n\n        const bytes = await module.arrayBuffer();\n        return await WebAssembly.instantiate(bytes, imports);\n\n    } else {\n        const instance = await WebAssembly.instantiate(module, imports);\n\n        if (instance instanceof WebAssembly.Instance) {\n            return { instance, module };\n\n        } else {\n            return instance;\n        }\n    }\n}\n\nasync function init(input) {\n    if (typeof input === 'undefined') {\n        input = new URL('index_bg.wasm', import.meta.url);\n    }\n    const imports = {};\n    imports.wbg = {};\n    imports.wbg.__wbindgen_object_drop_ref = function(arg0) {\n        takeObject(arg0);\n    };\n    imports.wbg.__wbindgen_string_new = function(arg0, arg1) {\n        var ret = getStringFromWasm0(arg0, arg1);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_new_59cb74e423758ede = function() {\n        var ret = new Error();\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_stack_558ba5917b466edd = function(arg0, arg1) {\n        var ret = getObject(arg1).stack;\n        var ptr0 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        getInt32Memory0()[arg0 / 4 + 1] = len0;\n        getInt32Memory0()[arg0 / 4 + 0] = ptr0;\n    };\n    imports.wbg.__wbg_error_4bb6c2a97407129a = function(arg0, arg1) {\n        try {\n            console.error(getStringFromWasm0(arg0, arg1));\n        } finally {\n            wasm.__wbindgen_free(arg0, arg1);\n        }\n    };\n    imports.wbg.__wbg_log_386a8115a84a780d = function(arg0) {\n        console.log(getObject(arg0));\n    };\n    imports.wbg.__wbindgen_throw = function(arg0, arg1) {\n        throw new Error(getStringFromWasm0(arg0, arg1));\n    };\n    imports.wbg.__wbindgen_rethrow = function(arg0) {\n        throw takeObject(arg0);\n    };\n\n    if (typeof input === 'string' || (typeof Request === 'function' && input instanceof Request) || (typeof URL === 'function' && input instanceof URL)) {\n        input = fetch(input);\n    }\n\n\n\n    const { instance, module } = await load(await input, imports);\n\n    wasm = instance.exports;\n    init.__wbindgen_wasm_module = module;\n\n    return wasm;\n}\n\nexport default init;\n\n","const presets = [\n    {\n        name: \"print-zero\",\n        description: \"Print \\'0\\'\",\n        program: \"++++++++[>++++++<-]>.\",\n        inputs: \"\",\n        outputAsDec: false,\n    },\n    {\n        name: \"hello-world\",\n        description: \"Hello World!\",\n        program: \"++++++++++[>+++++++>++++++++++>+++>+<<<<-]>++.>+.+++++++..+++.>++.<<+++++++++++++++.>.+++.------.--------.>+.>.\",\n        inputs: \"\",\n        outputAsDec: false,\n    },\n    {\n        name: \"sum-to-n\",\n        description: \"Sum 1 to n (n < 23)\",\n        program: \",[[>+>+<<-]>-[<+>-]<]>>.\",\n        inputs: \"5\",\n        outputAsDec: true,\n    },\n\n];\n\nexport { presets };\n","import App from './App.svelte';\nimport wasm from './greeting/Cargo.toml';\nimport { presets } from './presets.js';\n\nconst init = async() => {\n\tconst greet = await wasm();\n\n\t// console.log(greet);\n\tconst bfState = greet.BfMachineState;\n\tconst initialState = bfState.new();\n\tconst app = new App({\n\t\ttarget: document.body,\n\t\tprops: {\n\t\t\tnewState: bfState.new,\n\t\t\tstate: initialState,\n\t\t\tprogram: greet.BfProgram,\n\t\t\tpresets: presets,\n\t\t}\n\t});\n};\n\ninit();"],"names":["noop","run","fn","blank_object","Object","create","run_all","fns","forEach","is_function","thing","safe_not_equal","a","b","component_subscribe","component","store","callback","$$","on_destroy","push","callbacks","unsub","subscribe","unsubscribe","append","target","node","appendChild","insert","anchor","insertBefore","detach","parentNode","removeChild","destroy_each","iterations","detaching","i","length","d","element","name","document","createElement","text","data","createTextNode","space","listen","event","handler","options","addEventListener","removeEventListener","attr","attribute","value","removeAttribute","getAttribute","setAttribute","set_data","wholeText","set_input_value","input","set_style","key","important","style","setProperty","current_component","set_current_component","dirty_components","binding_callbacks","render_callbacks","flush_callbacks","resolved_promise","Promise","resolve","update_scheduled","add_render_callback","flushing","seen_callbacks","Set","flush","update","pop","has","add","clear","fragment","before_update","dirty","p","ctx","after_update","outroing","transition_in","block","local","delete","transition_out","o","outros","c","create_component","mount_component","on_mount","m","new_on_destroy","map","filter","destroy_component","make_dirty","then","fill","init","instance","create_fragment","not_equal","props","parent_component","prop_values","bound","context","Map","skip_bound","ready","ret","rest","hydrate","nodes","Array","from","childNodes","children","l","intro","SvelteComponent","[object Object]","this","$destroy","type","index","indexOf","splice","$$props","obj","$$set","keys","tapes","tapeIndex","indexPositionStyle","subscriber_queue","programInput","start","stop","subscribers","set","new_value","run_queue","s","invalidate","subscriber","writable","isRunning","curIndex","inputText","displayElem","$programInput","console","log","head","slice","caratChar","tail","description","sleep","ms","setTimeout","state","program","newState","presets","inputStr","outputStr","showDec","machineInstance","errorStr","programIndex","paused","pushInput","machine","splitted","split","every","n","isU8","ch","isNaN","parseFloat","parseInt","push_input","step","output_dec","output","get_index","ex","error","toString","get_display_tapes","parse","needs_input","Error","can_execute","preset","outputAsDec","inputs","reset","wasm","heap","undefined","getObject","idx","heap_next","takeObject","dropObject","cachedTextDecoder","TextDecoder","ignoreBOM","fatal","decode","cachegetUint8Memory0","getUint8Memory0","buffer","memory","Uint8Array","getStringFromWasm0","ptr","len","subarray","addHeapObject","cachegetInt32Memory0","getInt32Memory0","Int32Array","WASM_VECTOR_LEN","cachedTextEncoder","TextEncoder","encodeString","encodeInto","arg","view","buf","encode","read","written","passStringToWasm0","malloc","realloc","mem","offset","code","charCodeAt","_assertClass","klass","BfMachineState","prototype","__destroy_into_raw","__wbg_bfmachinestate_free","bfmachinestate_new","__wrap","bfmachinestate_reset","retptr","__wbindgen_add_to_stack_pointer","bfmachinestate_output","r0","r1","__wbindgen_free","bfmachinestate_output_dec","bfmachinestate_get_index","ptr0","passArray8ToWasm0","__wbindgen_malloc","len0","bfmachinestate_push_input","bfmachinestate_get_input","bfmachinestate_log_input","bfmachinestate_get_tape_value","bfmachinestate_get_display_tapes","v0","BfProgram","__wbg_bfprogram_free","prg","__wbindgen_realloc","bfprogram_parse","bfprogram_step","bfprogram_execute","bfprogram_reset","bfprogram_needs_input","bfprogram_get_index","bfprogram_can_execute","async","URL","imports","wbg","__wbindgen_object_drop_ref","arg0","__wbindgen_string_new","arg1","__wbg_new_59cb74e423758ede","__wbg_stack_558ba5917b466edd","stack","__wbg_error_4bb6c2a97407129a","__wbg_log_386a8115a84a780d","__wbindgen_throw","__wbindgen_rethrow","Request","fetch","module","Response","WebAssembly","instantiateStreaming","e","headers","get","warn","bytes","arrayBuffer","instantiate","Instance","load","exports","__wbindgen_wasm_module","greet","bfState","initialState","new","App","body"],"mappings":"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"}